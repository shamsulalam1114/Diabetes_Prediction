import streamlit as st
import joblib
import pandas as pd
from fpdf import FPDF
from datetime import datetime


# --- PDF Report Generation Function ---
def create_pdf_report(patient_data, prediction_result, confidence):
    """Generates a PDF report with patient data and prediction results."""
    pdf = FPDF()
    pdf.add_page()

    # Title
    pdf.set_font("Arial", 'B', 20)
    pdf.cell(0, 10, "Diabetes Prediction Report", 0, 1, 'C')
    pdf.ln(10)

    # Report Info
    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, f"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1)
    pdf.ln(5)

    # Patient Data Section
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "Patient Information", 0, 1)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())  # separator line
    pdf.ln(5)

    pdf.set_font("Arial", '', 12)
    for key, value in patient_data.items():
        pdf.cell(95, 10, f"{key.replace('_', ' ').title()}:", 0, 0)
        pdf.cell(95, 10, str(value), 0, 1)
    pdf.ln(10)

    # Prediction Result Section
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "Prediction Result", 0, 1)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())  # separator line
    pdf.ln(5)

    pdf.set_font("Arial", 'B', 14)
    if prediction_result == "Positive":
        pdf.set_text_color(220, 53, 69)  # Red color for positive
        result_text = "High Likelihood of Diabetes"
    else:
        pdf.set_text_color(40, 167, 69)  # Green color for negative
        result_text = "Low Likelihood of Diabetes"

    pdf.cell(0, 10, result_text, 0, 1)
    pdf.set_text_color(0, 0, 0)  # Reset to black

    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, f"Model Confidence: {confidence}", 0, 1)
    pdf.ln(15)

    # Disclaimer
    pdf.set_font("Arial", 'I', 10)
    pdf.multi_cell(0, 5,
                   "Disclaimer: This is a prediction generated by a machine learning model and should not be considered a substitute for a professional medical diagnosis. Please consult a healthcare provider for any health concerns.",
                   0, 'C')

    # Return PDF as bytes
    return bytes(pdf.output())


# --- Load Model ---
try:
    model = joblib.load("best_global_stacking_model.pkl")
except FileNotFoundError:
    st.error("Error: The model file 'best_global_stacking_model.pkl' was not found.")
    st.stop()

# --- Page Config & Styling ---
st.set_page_config(page_title="Diabetes Prediction", layout="wide")

# THIS IS THE NEW, MORE ROBUST CSS SECTION
st.markdown(
    """
    <style>
    /* ---- General & Background ---- */
    .main, .stApp {
        background-color: #f0f2f6;
    }
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }

    /* ---- TEXT VISIBILITY FIX ---- */
    /* Set a default dark color for the main text elements */
    body {
        color: #31333F;
    }
    /* Target all input labels specifically to ensure they are visible */
    label {
        color: #31333F !important;
    }
    /* Target all headings */
    h1, h3 {
        color: #1c4e80 !important;
        text-align: center;
    }
    /* Target Metric components to ensure visibility */
    [data-testid="stMetricLabel"] {
        color: #5a5a5a !important;
    }
    [data-testid="stMetricValue"] {
        color: #31333F !important;
    }

    /* ---- Button Styling ---- */
    .stButton>button {
        width: 100%;
        border-radius: 20px;
        border: 1px solid #1c4e80;
        background-color: #1c4e80;
        color: white;
        transition: all 0.2s ease-in-out;
    }
    .stButton>button:hover {
        background-color: white;
        color: #1c4e80;
        border: 1px solid #1c4e80;
    }
    .stButton>button:active {
        background-color: #153b66;
        color: white;
        border: 1px solid #153b66;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- App Layout ---
st.title("ü©∫ Diabetes Prediction System")
st.markdown(
    "<h4 style='text-align: center; color: #5a5a5a;'>Provide the patient's details to predict the likelihood of diabetes.</h4>",
    unsafe_allow_html=True)
st.markdown("---")

# --- Centered Content ---
_, center_col, _ = st.columns([1, 2, 1])

with center_col:
    with st.container(border=True):
        st.subheader("Patient Health Metrics")
        with st.form("patient_form"):
            col1, col2 = st.columns(2)
            with col1:
                age = st.number_input("Age (years)", min_value=1, max_value=120, value=30)
                pulse_rate = st.number_input("Pulse Rate (per min)", min_value=30, max_value=200, value=72)
                systolic_bp = st.number_input("Systolic BP (mmHg)", min_value=80, max_value=250, value=120)
                diastolic_bp = st.number_input("Diastolic BP (mmHg)", min_value=50, max_value=150, value=80)
                glucose = st.number_input("Glucose Level (mg/dL)", min_value=50, max_value=500, value=100)
            with col2:
                height = st.number_input("Height (cm)", min_value=100, max_value=250, value=170)
                weight = st.number_input("Weight (kg)", min_value=30, max_value=200, value=70)
                bmi = st.number_input("Body Mass Index (BMI)", min_value=10.0, max_value=60.0, value=24.0,
                                      format="%.2f", help="Calculated as weight (kg) / [height (m)]^2")
                hypertensive = st.selectbox("Patient is Hypertensive?", [0, 1],
                                            format_func=lambda x: "Yes" if x == 1 else "No")
            submitted = st.form_submit_button("Submit for Prediction")

    # --- Prediction and Report Display ---
    st.markdown("---")

    if submitted:
        input_data_dict = {
            'age': age, 'pulse_rate': pulse_rate, 'systolic_bp': systolic_bp,
            'diastolic_bp': diastolic_bp, 'glucose': glucose, 'height': height,
            'weight': weight, 'bmi': bmi, 'hypertensive': hypertensive
        }
        input_data_df = pd.DataFrame([list(input_data_dict.values()) + [0]],
                                     columns=list(input_data_dict.keys()) + ['diagnostic_label'])
        prediction = model.predict(input_data_df)[0]
        proba = model.predict_proba(input_data_df)[0][1] if hasattr(model, "predict_proba") else None

        with st.container(border=True):
            st.subheader("Prediction Outcome")
            if prediction == 1:
                st.error("Result: High Likelihood of Diabetes", icon="‚ö†Ô∏è")
                confidence_score = f"{proba:.2%}" if proba is not None else "N/A"
                prediction_text = "Positive"
            else:
                st.success("Result: Low Likelihood of Diabetes", icon="‚úÖ")
                confidence_score = f"{1 - proba:.2%}" if proba is not None else "N/A"
                prediction_text = "Negative"

            st.metric(label="Prediction Confidence", value=confidence_score)
            st.caption("This confidence score represents the model's certainty in its prediction.")
            pdf_bytes = create_pdf_report(input_data_dict, prediction_text, confidence_score)
            st.download_button(
                label="üì• Download Report (PDF)",
                data=pdf_bytes,
                file_name=f"diabetes_report_{datetime.now().strftime('%Y%m%d')}.pdf",
                mime="application/pdf",
            )
    else:
        st.info("The prediction result will be displayed here after you submit the patient's data.")